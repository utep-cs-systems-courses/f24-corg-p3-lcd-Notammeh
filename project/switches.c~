#include <msp430.h>
#include "switches.h"
#include "statemachine.h"

char switch_state_down = 0; // Flag to indicate a switch was pressed

// Update interrupt sense for switches
static char switch_update_interrupt_sense() {
    char p2val = P2IN;
    // Update switch interrupt to detect changes
    P2IES |= (p2val & SWITCHES);  // If switch is up, sense down
    P2IES &= (p2val | ~SWITCHES); // If switch is down, sense up
    return p2val;
}

// Initialize switches
void switch_init() {
    P2REN |= SWITCHES;  // Enable resistors for switches
    P2IE |= SWITCHES;   // Enable interrupts for switches
    P2OUT |= SWITCHES;  // Pull-up resistors
    P2DIR &= ~SWITCHES; // Set switches as input
    switch_update_interrupt_sense();
}

// Interrupt handler for switches
void switch_interrupt_handler() {
    char p2val = switch_update_interrupt_sense();
    char sw1 = !(p2val & SW1); // Check if SW1 is pressed
    char sw2 = !(p2val & SW2); // Check if SW2 is pressed

    if (sw1) {
        state_advance();     // Advance the state machine
        switch_state_down = 1;
    } else if (sw2) {
        state = RESET;       // Set state to RESET
        switch_state_down = 1;
    }
}

// Interrupt vector for Port 2
void __interrupt_vec(PORT2_VECTOR) Port_2() {
    if (P2IFG & SWITCHES) {         // Check if a button caused the interrupt
        P2IFG &= ~SWITCHES;         // Clear pending interrupts
        switch_interrupt_handler(); // Call the handler
    }
}

